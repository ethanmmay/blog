(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{509:function(e,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"day-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day-4"}},[e._v("#")]),e._v(" Day 4")]),e._v(" "),a("h3",{attrs:{id:"implementing-auth0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementing-auth0"}},[e._v("#")]),e._v(" Implementing Auth0")]),e._v(" "),a("p",[e._v("Starting the day with a simple function that checks if three given values can be the lengths of a triangle, we studied the Auth0 API and learned how to implement it's architecture into ours, providing simple and easy to use security for our new many-to-many capable databases. With Google and Auth0's partnership, it was a little confusing to set up and while it introduced many new Id's to keep track of, I believe I have a decent understanding of how we can use AuthO to process users and their qualifications for certain HTTP methods.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("A virtual property is a property on a base object that is open for changes.")])]),e._v(" "),a("li",[a("p",[e._v("You can use a virtual property to create a derived object from a base object. We have virtual properties on our APIs that define the version of an object and many other behind the scenes metadata and identifiers.")])]),e._v(" "),a("li",[a("p",[e._v("You can create a non-virtual property that reads the value of a virtual property in your model, which can then be used in a query paramter that defines what data you retrieve based on virtual property values.")])])]),e._v(" "),a("p",[e._v("Link to Project: https://github.com/ethanmmay/auth0/")])])}),[],!1,null,null,null);t.default=r.exports}}]);